// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pilot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PilotServiceClient is the client API for PilotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PilotServiceClient interface {
	//Get config file from pilot
	GetBotPayload(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (*ServiceInit, error)
	//Get and check approval from pilot (scaling scrapping only)
	RequestRunJobsOfService(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (*RunJob, error)
	//Get agency payload for non scaling service only
	GetAgencyPayload(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (*AgencyPayload, error)
	HeartBeat(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (PilotService_HeartBeatClient, error)
	MetricReport(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Message, error)
	ReportError(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (*Message, error)
}

type pilotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPilotServiceClient(cc grpc.ClientConnInterface) PilotServiceClient {
	return &pilotServiceClient{cc}
}

func (c *pilotServiceClient) GetBotPayload(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (*ServiceInit, error) {
	out := new(ServiceInit)
	err := c.cc.Invoke(ctx, "/pilot.PilotService/GetBotPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) RequestRunJobsOfService(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (*RunJob, error) {
	out := new(RunJob)
	err := c.cc.Invoke(ctx, "/pilot.PilotService/RequestRunJobsOfService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) GetAgencyPayload(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (*AgencyPayload, error) {
	out := new(AgencyPayload)
	err := c.cc.Invoke(ctx, "/pilot.PilotService/GetAgencyPayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) HeartBeat(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (PilotService_HeartBeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &PilotService_ServiceDesc.Streams[0], "/pilot.PilotService/HeartBeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &pilotServiceHeartBeatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PilotService_HeartBeatClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type pilotServiceHeartBeatClient struct {
	grpc.ClientStream
}

func (x *pilotServiceHeartBeatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pilotServiceClient) MetricReport(ctx context.Context, in *Metric, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pilot.PilotService/MetricReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pilotServiceClient) ReportError(ctx context.Context, in *ServiceMessage, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pilot.PilotService/ReportError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PilotServiceServer is the server API for PilotService service.
// All implementations must embed UnimplementedPilotServiceServer
// for forward compatibility
type PilotServiceServer interface {
	//Get config file from pilot
	GetBotPayload(context.Context, *ServiceMessage) (*ServiceInit, error)
	//Get and check approval from pilot (scaling scrapping only)
	RequestRunJobsOfService(context.Context, *ServiceMessage) (*RunJob, error)
	//Get agency payload for non scaling service only
	GetAgencyPayload(context.Context, *ServiceMessage) (*AgencyPayload, error)
	HeartBeat(*ServiceMessage, PilotService_HeartBeatServer) error
	MetricReport(context.Context, *Metric) (*Message, error)
	ReportError(context.Context, *ServiceMessage) (*Message, error)
	mustEmbedUnimplementedPilotServiceServer()
}

// UnimplementedPilotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPilotServiceServer struct {
}

func (UnimplementedPilotServiceServer) GetBotPayload(context.Context, *ServiceMessage) (*ServiceInit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBotPayload not implemented")
}
func (UnimplementedPilotServiceServer) RequestRunJobsOfService(context.Context, *ServiceMessage) (*RunJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRunJobsOfService not implemented")
}
func (UnimplementedPilotServiceServer) GetAgencyPayload(context.Context, *ServiceMessage) (*AgencyPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgencyPayload not implemented")
}
func (UnimplementedPilotServiceServer) HeartBeat(*ServiceMessage, PilotService_HeartBeatServer) error {
	return status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedPilotServiceServer) MetricReport(context.Context, *Metric) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricReport not implemented")
}
func (UnimplementedPilotServiceServer) ReportError(context.Context, *ServiceMessage) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportError not implemented")
}
func (UnimplementedPilotServiceServer) mustEmbedUnimplementedPilotServiceServer() {}

// UnsafePilotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PilotServiceServer will
// result in compilation errors.
type UnsafePilotServiceServer interface {
	mustEmbedUnimplementedPilotServiceServer()
}

func RegisterPilotServiceServer(s grpc.ServiceRegistrar, srv PilotServiceServer) {
	s.RegisterService(&PilotService_ServiceDesc, srv)
}

func _PilotService_GetBotPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetBotPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pilot.PilotService/GetBotPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetBotPayload(ctx, req.(*ServiceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_RequestRunJobsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).RequestRunJobsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pilot.PilotService/RequestRunJobsOfService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).RequestRunJobsOfService(ctx, req.(*ServiceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_GetAgencyPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).GetAgencyPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pilot.PilotService/GetAgencyPayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).GetAgencyPayload(ctx, req.(*ServiceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_HeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServiceMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PilotServiceServer).HeartBeat(m, &pilotServiceHeartBeatServer{stream})
}

type PilotService_HeartBeatServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type pilotServiceHeartBeatServer struct {
	grpc.ServerStream
}

func (x *pilotServiceHeartBeatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _PilotService_MetricReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).MetricReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pilot.PilotService/MetricReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).MetricReport(ctx, req.(*Metric))
	}
	return interceptor(ctx, in, info, handler)
}

func _PilotService_ReportError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PilotServiceServer).ReportError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pilot.PilotService/ReportError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PilotServiceServer).ReportError(ctx, req.(*ServiceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// PilotService_ServiceDesc is the grpc.ServiceDesc for PilotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PilotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pilot.PilotService",
	HandlerType: (*PilotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBotPayload",
			Handler:    _PilotService_GetBotPayload_Handler,
		},
		{
			MethodName: "RequestRunJobsOfService",
			Handler:    _PilotService_RequestRunJobsOfService_Handler,
		},
		{
			MethodName: "GetAgencyPayload",
			Handler:    _PilotService_GetAgencyPayload_Handler,
		},
		{
			MethodName: "MetricReport",
			Handler:    _PilotService_MetricReport_Handler,
		},
		{
			MethodName: "ReportError",
			Handler:    _PilotService_ReportError_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HeartBeat",
			Handler:       _PilotService_HeartBeat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
