image: docker:stable

stages:
  - build
  - deploy

variables:
  # When using dind service, we need to instruct docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  #
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"

services:
  - docker:19.03.12-dind

before_script:
  - docker info
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

include:
  - template: Code-Quality.gitlab-ci.yml

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  
code_quality:
  stage: build  
  artifacts:
    paths: [gl-code-quality-report.json]

build go-simp image:
  stage: build
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .

build go-simp migrate service:
  stage: build
  before_script:
    - docker pull "$CI_REGISTRY_IMAGE"
    - docker tag "$CI_REGISTRY_IMAGE" go-simp
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE-migrate ./service/db_migrate

build go-simp fanart service:
  stage: build
  before_script:
    - docker pull "$CI_REGISTRY_IMAGE"
    - docker tag "$CI_REGISTRY_IMAGE" go-simp  
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE-fanart ./service/fanart    

build go-simp livestream service:
  stage: build
  before_script:
    - docker pull "$CI_REGISTRY_IMAGE"
    - docker tag "$CI_REGISTRY_IMAGE" go-simp  
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE-livestream ./service/livestream

build go-simp subscriber service:
  stage: build
  before_script:
    - docker pull "$CI_REGISTRY_IMAGE"
    - docker tag "$CI_REGISTRY_IMAGE" go-simp  
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE-subscriber ./service/subscriber

build go-simp utility service:
  stage: build
  before_script:
    - docker pull "$CI_REGISTRY_IMAGE"
    - docker tag "$CI_REGISTRY_IMAGE" go-simp  
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE-utility ./service/utility

build go-simp frontend service:
  stage: build
  before_script:
    - docker pull "$CI_REGISTRY_IMAGE"
    - docker tag "$CI_REGISTRY_IMAGE" go-simp  
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE-frontend ./service/frontend

build go-simp guild service:
  stage: build
  before_script:
    - docker pull "$CI_REGISTRY_IMAGE"
    - docker tag "$CI_REGISTRY_IMAGE" go-simp  
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE-guild ./service/guild

build go-simp web service:
  stage: build
  before_script:
    - docker pull "$CI_REGISTRY_IMAGE"
    - docker tag "$CI_REGISTRY_IMAGE" go-simp  
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE-web ./service/web

build go-simp rest-api service:
  stage: build
  before_script:
    - docker pull "$CI_REGISTRY_IMAGE"
    - docker tag "$CI_REGISTRY_IMAGE" go-simp  
  script:
    - docker build --pull -t $CI_REGISTRY_IMAGE-rest-api ./service/rest-api