image: docker:19.03.12

services:
  - docker:19.03.12-dind

variables:
  BASEIMAGE: "$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG"

stages:
  - init
  - build
  - deploy

build go-simp:
  stage: init
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info
  script:
    - docker build -t $BASEIMAGE .
    - docker push $BASEIMAGE
  tags:
    - docker
    - gce    
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success


build pilot:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info  
  script:
    - docker pull $BASEIMAGE
    - docker tag $BASEIMAGE go-simp
    - docker build -t pilot $CI_PROJECT_DIR/service/pilot
    - docker tag pilot "$CI_REGISTRY_IMAGE"/pilot:"$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/pilot:"$CI_COMMIT_TAG"
  tags:
    - docker
    - gce    
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success

build migrate:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info  
  script:
    - docker pull $BASEIMAGE
    - docker tag $BASEIMAGE go-simp
    - docker build -t migrate $CI_PROJECT_DIR/service/migrate
    - docker tag migrate "$CI_REGISTRY_IMAGE"/migrate:"$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/migrate:"$CI_COMMIT_TAG"
  tags:
    - docker
    - gce    
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success

build fanart:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info   
  script:
    - docker pull $BASEIMAGE
    - docker tag $BASEIMAGE go-simp
    - docker build -t fanart $CI_PROJECT_DIR/service/fanart
    - docker tag fanart "$CI_REGISTRY_IMAGE"/fanart:"$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/fanart:"$CI_COMMIT_TAG"
  tags:
    - docker
    - gce        
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success

build livestream:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info   
  script:
    - docker pull $BASEIMAGE
    - docker tag $BASEIMAGE go-simp
    - docker build -t livestream $CI_PROJECT_DIR/service/livestream
    - docker tag livestream "$CI_REGISTRY_IMAGE"/livestream:"$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/livestream:"$CI_COMMIT_TAG"
  tags:
    - docker
    - gce        
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success

build subscriber:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info   
  script:
    - docker pull $BASEIMAGE
    - docker tag $BASEIMAGE go-simp
    - docker build -t subscriber $CI_PROJECT_DIR/service/subscriber
    - docker tag subscriber "$CI_REGISTRY_IMAGE"/subscriber:"$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/subscriber:"$CI_COMMIT_TAG"   
  tags:
    - docker
    - gce        
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success

build utility:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info   
  script:
    - docker pull $BASEIMAGE
    - docker tag $BASEIMAGE go-simp
    - docker build -t utility $CI_PROJECT_DIR/service/utility
    - docker tag utility "$CI_REGISTRY_IMAGE"/utility:"$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/utility:"$CI_COMMIT_TAG"       
  tags:
    - docker
    - gce        
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success

build frontend:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info   
  script:
    - docker pull $BASEIMAGE
    - docker tag $BASEIMAGE go-simp
    - docker build -t frontend $CI_PROJECT_DIR/service/frontend
    - docker tag frontend "$CI_REGISTRY_IMAGE"/frontend:"$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/frontend:"$CI_COMMIT_TAG"        
  tags:
    - docker
    - gce        
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success

build guild:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info   
  script:
    - docker pull $BASEIMAGE
    - docker tag $BASEIMAGE go-simp
    - docker build -t guild $CI_PROJECT_DIR/service/guild
    - docker tag guild "$CI_REGISTRY_IMAGE"/guild:"$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/guild:"$CI_COMMIT_TAG"  
  tags:
    - docker
    - gce        
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success

build rest_api:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info   
  script:
    - docker pull $BASEIMAGE
    - docker tag $BASEIMAGE go-simp    
    - docker build -t api $CI_PROJECT_DIR/service/rest-api
    - docker tag api "$CI_REGISTRY_IMAGE"/api:"$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/api:"$CI_COMMIT_TAG"
  tags:
    - docker
    - gce        
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success

build static_files:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info   
  script:
    - docker build -t static_files $CI_PROJECT_DIR/Img
    - docker tag static_files "$CI_REGISTRY_IMAGE"/static_files
    - docker push "$CI_REGISTRY_IMAGE"/static_files
  tags:
    - docker
    - gce        

build web:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info   
  script:
    - docker build -t web $CI_PROJECT_DIR/service/web
    - docker tag web "$CI_REGISTRY_IMAGE"/web:"$CI_COMMIT_TAG"
    - docker push "$CI_REGISTRY_IMAGE"/web:"$CI_COMMIT_TAG"
  tags:
    - docker
    - gce            
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success

build multitor:
  stage: build
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker info   
  script:
    - docker build -t multitor $CI_PROJECT_DIR/service/multitor/
    - docker tag multitor "$CI_REGISTRY_IMAGE"/multitor
    - docker push "$CI_REGISTRY_IMAGE"/multitor
  tags:
    - docker
    - gce            


deploy:
  image: alpine:latest
  stage: deploy
  script:
    - apk update  && apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl && mv ./kubectl /usr/local/bin/kubectl
    - mkdir -p $HOME/.kube
    - echo -n ${KUBE_CONFIG} | base64 -d > $HOME/.kube/config
    - kubectl --record deployment.apps/go-simp-fanart set image deployment.v1.apps/go-simp-fanart registry.gitlab.com/justhumanz/go-simp/fanart=registry.gitlab.com/justhumanz/go-simp/fanart:"$CI_COMMIT_TAG" -n go-simp
    - kubectl --record deployment.apps/go-simp-frontend set image deployment.v1.apps/go-simp-frontend registry.gitlab.com/justhumanz/go-simp/frontend=registry.gitlab.com/justhumanz/go-simp/frontend:"$CI_COMMIT_TAG" -n go-simp
    - kubectl --record deployment.apps/go-simp-guild set image deployment.v1.apps/go-simp-guild registry.gitlab.com/justhumanz/go-simp/guild=registry.gitlab.com/justhumanz/go-simp/guild:"$CI_COMMIT_TAG" -n go-simp
    - kubectl --record deployment.apps/go-simp-live set image deployment.v1.apps/go-simp-live registry.gitlab.com/justhumanz/go-simp/livestream=registry.gitlab.com/justhumanz/go-simp/livestream:"$CI_COMMIT_TAG" -n go-simp
    - kubectl --record deployment.apps/go-simp-pilot set image deployment.v1.apps/go-simp-pilot registry.gitlab.com/justhumanz/go-simp/pilot=registry.gitlab.com/justhumanz/go-simp/pilot:"$CI_COMMIT_TAG" -n go-simp
    - kubectl --record deployment.apps/go-simp-subscriber set image deployment.v1.apps/go-simp-subscriber registry.gitlab.com/justhumanz/go-simp/subscriber=registry.gitlab.com/justhumanz/go-simp/subscriber:"$CI_COMMIT_TAG" -n go-simp        
    - kubectl --record deployment.apps/go-simp-utility set image deployment.v1.apps/go-simp-utility registry.gitlab.com/justhumanz/go-simp/utility=registry.gitlab.com/justhumanz/go-simp/utility:"$CI_COMMIT_TAG" -n go-simp           
    - kubectl --record deployment.apps/go-simp-web set image deployment.v1.apps/go-simp-web registry.gitlab.com/justhumanz/go-simp/web=registry.gitlab.com/justhumanz/go-simp/web:"$CI_COMMIT_TAG" -n go-simp                
  rules :
    - if: $CI_COMMIT_TAG != null
      when: on_success
    - when: manual      
  tags:
    - k8s    
